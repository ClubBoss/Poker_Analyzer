import 'dart:io';

import 'package:yaml/yaml.dart';

import '../models/theory_mini_lesson_node.dart';

/// Imports [TheoryMiniLessonNode]s from YAML files generated by
/// [TheoryPackExporterService].
class TheoryPackImporterService {
  const TheoryPackImporterService();

  /// Loads lessons from [dirPath].
  ///
  /// When [stageOnly] is true only files starting with `stage_` are parsed.
  Future<List<TheoryMiniLessonNode>> importLessons(
    String dirPath, {
    bool stageOnly = false,
  }) async {
    final dir = Directory(dirPath);
    if (!await dir.exists()) return [];
    final lessons = <TheoryMiniLessonNode>[];
    await for (final entity in dir.list()) {
      if (entity is! File) continue;
      final name = entity.uri.pathSegments.last;
      if (!name.endsWith('.yaml')) continue;
      if (stageOnly && !name.startsWith('stage_')) continue;
      final content = await entity.readAsString();
      final yaml = loadYaml(content);
      final raw = yaml is YamlMap ? yaml['lessons'] : null;
      if (raw is YamlList) {
        for (final item in raw) {
          if (item is Map) {
            lessons.add(
              TheoryMiniLessonNode.fromYaml(Map<String, dynamic>.from(item)),
            );
          }
        }
      }
    }
    return lessons;
  }
}
