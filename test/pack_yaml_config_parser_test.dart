import 'package:test/test.dart';
import 'package:poker_analyzer/core/training/generation/pack_yaml_config_parser.dart';
import 'package:poker_analyzer/models/game_type.dart';

void main() {
  test('parse returns requests', () {
    const yaml = '''
packs:
  - gameType: tournament
    bb: 10
    positions: [sb, bb]
    title: Test
    description: Desc
    tags: [pushfold]
    count: 20
  - gameType: cash
    bb: 50
    positions: [btn]
    title: Cash
    description: Example
    tags: [cash]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.length, 2);
    expect(list.first.gameType, GameType.tournament);
    expect(list.first.bb, 10);
    expect(list.first.bbList, isNull);
    expect(list.first.positions, ['sb', 'bb']);
    expect(list.first.title, 'Test');
    expect(list.first.tags, ['pushfold']);
    expect(list.first.count, 20);
    expect(list.first.multiplePositions, false);
    expect(list.last.count, 25);
    expect(list.last.gameType, GameType.cash);
  });

  test('parse applies default tags', () {
    const yaml = '''
defaultTags: [pushfold, autogenerated]
packs:
  - gameType: tournament
    bb: 10
    positions: [sb]
  - gameType: cash
    bb: 5
    positions: [bb]
    tags: [cash]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.tags, ['pushfold', 'autogenerated']);
    expect(list.last.tags, ['cash']);
  });

  test('parse supports defaultTags string', () {
    const yaml = '''
defaultTags: pushfold
packs:
  - gameType: tournament
    bb: 10
    positions: [sb]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    expect(config.requests.first.tags, ['pushfold']);
  });

  test('parse handles tags string and empty list', () {
    const yaml = '''
defaultTags: pushfold
packs:
  - gameType: tournament
    bb: 10
    positions: [sb]
    tags: cash
  - gameType: tournament
    bb: 15
    positions: [bb]
    tags: []
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.tags, ['cash']);
    expect(list.last.tags, ['pushfold']);
  });

  test('parse reads multiplePositions flag', () {
    const yaml = '''
packs:
  - gameType: tournament
    bb: 15
    positions: [btn, sb]
    multiplePositions: true
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.multiplePositions, true);
  });

  test('parse reads bbList', () {
    const yaml = '''
packs:
  - gameType: tournament
    bbList: [10, 20]
    positions: [btn]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.bbList, [10, 20]);
    expect(list.first.bb, 0);
  });

  test('parse applies defaultGameType', () {
    const yaml = '''
defaultGameType: tournament
packs:
  - bb: 10
    positions: [sb]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.gameType, GameType.tournament);
  });

  test('local gameType overrides defaultGameType', () {
    const yaml = '''
defaultGameType: tournament
packs:
  - gameType: cash
    bb: 5
    positions: [bb]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.gameType, GameType.cash);
  });

  test('parse applies default count and multiple positions', () {
    const yaml = '''
defaultCount: 5
defaultMultiplePositions: true
packs:
  - gameType: tournament
    bb: 15
    positions: [btn, sb]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.count, 5);
    expect(list.first.multiplePositions, true);
  });

  test('local values override defaults', () {
    const yaml = '''
defaultCount: 5
defaultMultiplePositions: true
packs:
  - gameType: tournament
    bb: 15
    positions: [btn]
    count: 3
    multiplePositions: false
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.count, 3);
    expect(list.first.multiplePositions, false);
  });

  test('parse reads rangeGroup', () {
    const yaml = '''
packs:
  - gameType: tournament
    bb: 10
    positions: [btn]
    rangeGroup: top15
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.rangeGroup, 'top15');
    expect(list.first.count, 25);
  });

  test('parse applies defaultRangeGroup', () {
    const yaml = '''
defaultRangeGroup: tilt
packs:
  - gameType: tournament
    bb: 10
    positions: [sb]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.rangeGroup, 'tilt');
  });

  test('parse reads defaultRangeTags flag', () {
    const yaml = '''
defaultRangeTags: true
packs:
  - gameType: tournament
    bb: 10
    positions: [sb]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    expect(config.rangeTags, true);
  });

  test('local rangeGroup overrides defaultRangeGroup', () {
    const yaml = '''
defaultRangeGroup: tilt
packs:
  - gameType: tournament
    bb: 10
    positions: [sb]
    rangeGroup: top15
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.rangeGroup, 'top15');
  });

  test('parse sets rangeTags false by default', () {
    const yaml = '''
packs:
  - gameType: tournament
    bb: 10
    positions: [sb]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    expect(config.rangeTags, false);
  });

  test('parse skips disabled packs', () {
    const yaml = '''
packs:
  - gameType: tournament
    bb: 10
    positions: [sb]
    enabled: false
  - gameType: cash
    bb: 5
    positions: [bb]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.length, 1);
    expect(list.first.gameType, GameType.cash);
  });

  test('parse applies defaultDescription', () {
    const yaml = '''
defaultDescription: Generated
packs:
  - gameType: tournament
    bb: 10
    positions: [sb]
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.description, 'Generated');
  });

  test('local description overrides defaultDescription', () {
    const yaml = '''
defaultDescription: Generated
packs:
  - gameType: tournament
    bb: 10
    positions: [sb]
    description: Local
''';
    final parser = PackYamlConfigParser();
    final config = parser.parse(yaml);
    final list = config.requests;
    expect(list.first.description, 'Local');
  });
}
