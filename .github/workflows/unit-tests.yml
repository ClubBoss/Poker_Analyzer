name: Unit Tests

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

concurrency:
  group: unit-tests-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 40
    strategy:
      fail-fast: true
      matrix:
        shard: [0, 1, 2, 3]          # 4 параллельных шарада
    env:
      TOTAL_SHARDS: 4
      FAIL_ON_ZERO_TESTS: true       # если нет тестов — падаем (строго)

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Надёжный fast-path: doc/CI-only по git diff
      - name: Compute fast-path (doc/CI-only)
        id: compute
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.base_ref || 'main' }}"
          echo "base_ref=$BASE"
          git fetch --no-tags origin "$BASE:refs/remotes/origin/$BASE" || true
          CHANGED="$(git diff --name-only "origin/$BASE"...HEAD || git diff --name-only "origin/$BASE")"
          echo "Changed files:"; echo "$CHANGED" | sed 's/^/  - /'
          FAST=true
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            if [[ "$f" =~ \.md$ || "$f" =~ \.mdx$ || "$f" =~ \.rst$ || "$f" == docs/* || "$f" == .github/workflows/* ]]; then
              :
            else
              FAST=false; break
            fi
          done <<< "$CHANGED"
          echo "fast_path=$FAST" | tee -a "$GITHUB_OUTPUT"

      - name: Decide scope (smoke vs full)
        id: scope
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          # Default to SMOKE. If PR has label 'full-ci' -> FULL
          labels="${{ toJson(github.event.pull_request.labels.*.name) }}"
          if echo "$labels" | grep -qi 'full-ci'; then
            echo "scope=full" >> "$GITHUB_OUTPUT"
            echo "Selected scope: FULL (label 'full-ci' present)"
          else
            echo "scope=smoke" >> "$GITHUB_OUTPUT"
            echo "Selected scope: SMOKE (no 'full-ci' label)"
          fi

      # ---------- FAST-PATH ----------
      - name: Fast-path mock run
        if: ${{ steps.compute.outputs.fast_path == 'true' }}
        run: |
          echo "Docs/CI-only PR detected — skipping heavy build/tests."
          echo "Unit Tests (fast-path) passed ✅"

      # ---------- FULL RUN (code PR) ----------
      - name: Set up Flutter
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter version
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        run: flutter --version

      - name: Cache Pub dependencies
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install deps
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        run: flutter pub get

      # Канарейка: запускаем один маленький тест раньше всех, чтобы быстро упасть если CI сломан
      - name: Run CI canary test (quick fail if broken)
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          if [ -f test/ci_canary_test.dart ]; then
            echo "Running canary test first…"
            flutter test -r expanded --concurrency=1 --timeout=2m test/ci_canary_test.dart
          else
            echo "No canary test file found (test/ci_canary_test.dart). Skipping."
          fi

      - name: Run smoke tests (fast subset)
        if: ${{ steps.compute.outputs.fast_path != 'true' && steps.scope.outputs.scope == 'smoke' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Running quick smoke subset…"
          FILES=()
          # Use only the lightweight canary as smoke to avoid pulling heavy app deps
          FILES+=("test/ci_canary_test.dart")
          # If any file is missing (older branches), skip gracefully
          EXISTING=()
          for f in "${FILES[@]}"; do
            if [ -f "$f" ]; then EXISTING+=("$f"); fi
          done
          if [ ${#EXISTING[@]} -eq 0 ]; then
            echo "No smoke tests found on this branch — skipping smoke run."
            exit 0
          fi
          printf "%s\n" "${EXISTING[@]}" | sed 's/^/  - /'
          # compact reporter to reduce log noise; moderate concurrency
          flutter test -r expanded --concurrency=2 --timeout=5m "${EXISTING[@]}"

      # Статанализ — advisory (не блокирует), чтобы сейчас тестировались именно юниты
      - name: Dart analyze (advisory)
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        run: dart analyze --no-fatal-infos --no-fatal-warnings || true

      # Разбивка тестов по шарадам (поддержка test/ и integration_test/)
      - name: Select tests for shard ${{ matrix.shard }}/${{ env.TOTAL_SHARDS }}
        if: ${{ steps.compute.outputs.fast_path != 'true' && steps.scope.outputs.scope == 'full' }}
        id: shard
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Collecting test files tracked by git…"
          mapfile -t ALL < <(find test integration_test -type f -name '*_test.dart' -print 2>/dev/null | sort)
          echo "Total *_test.dart found: ${#ALL[@]}"
          if [ ${#ALL[@]} -eq 0 ]; then
            echo "No *_test.dart files found under (test|integration_test) — failing (FAIL_ON_ZERO_TESTS=true)."
            exit 1
          fi
          SHARD_IDX=${{ matrix.shard }}
          TOTAL=${{ env.TOTAL_SHARDS }}
          SEL=()
          for i in "${!ALL[@]}"; do
            if (( i % TOTAL == SHARD_IDX )); then SEL+=("${ALL[$i]}"); fi
          done
          if [ ${#SEL[@]} -eq 0 ]; then
            echo "This shard ($SHARD_IDX/$TOTAL) has no assigned tests — skipping."
            echo "no_tests=true" >> "$GITHUB_OUTPUT"; exit 0
          fi
          printf "%s\n" "${SEL[@]}" | tee shard_tests.txt
          echo "Assigned to shard $SHARD_IDX:"; sed 's/^/  - /' shard_tests.txt
          echo "no_tests=false" >> "$GITHUB_OUTPUT"

      - name: Run unit tests for shard ${{ matrix.shard }}
        if: ${{ steps.compute.outputs.fast_path != 'true' && steps.scope.outputs.scope == 'full' && steps.shard.outputs.no_tests == 'false' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Running tests in shard ${{ matrix.shard }} of ${{ env.TOTAL_SHARDS }}:"
          sed 's/^/  - /' shard_tests.txt
          flutter test -r expanded --concurrency=6 --timeout=5m $(cat shard_tests.txt)

      - name: Collect coverage (shard 0 only)
        if: ${{ steps.compute.outputs.fast_path != 'true' && steps.scope.outputs.scope == 'full' && github.event_name != 'pull_request' && matrix.shard == 0 && steps.shard.outputs.no_tests == 'false' }}
        run: flutter test --coverage --concurrency=6 --timeout=5m $(cat shard_tests.txt)

      - name: Upload coverage (shard 0 only)
        if: ${{ steps.compute.outputs.fast_path != 'true' && steps.scope.outputs.scope == 'full' && github.event_name != 'pull_request' && matrix.shard == 0 && steps.shard.outputs.no_tests == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage/lcov.info
          if-no-files-found: warn