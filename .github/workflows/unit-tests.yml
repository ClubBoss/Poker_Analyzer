name: Unit Tests

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

concurrency:
  group: unit-tests-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 40
    strategy:
      fail-fast: true
      matrix:
        shard: [0, 1, 2, 3]               # 4 параллельных шарда
    env:
      TOTAL_SHARDS: 4

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Надёжный doc/CI-only fast-path (без --depth)
      - name: Compute fast-path (doc/CI-only)
        id: compute
        shell: bash
        run: |
          set -Eeuo pipefail
          BASE="${{ github.base_ref || 'main' }}"
          echo "base_ref=$BASE"
          git fetch --no-tags origin "$BASE:refs/remotes/origin/$BASE" || true

          CHANGED="$(git diff --name-only "origin/$BASE"...HEAD || git diff --name-only "origin/$BASE")"
          echo "Changed files:"
          echo "$CHANGED" | sed 's/^/  - /'

          FAST=true
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            if [[ "$f" =~ \.md$ || "$f" =~ \.mdx$ || "$f" =~ \.rst$ || "$f" == docs/* || "$f" == .github/workflows/* ]]; then
              :
            else
              FAST=false; break
            fi
          done <<< "$CHANGED"

          echo "fast_path=$FAST" | tee -a "$GITHUB_OUTPUT"

      # ----- FAST-PATH -----
      - name: Fast-path mock run
        if: ${{ steps.compute.outputs.fast_path == 'true' }}
        run: |
          echo "Docs/CI-only PR detected — skipping heavy build/tests."
          echo "Unit Tests (fast-path) passed ✅"

      # ----- FULL RUN (code PR) -----
      - name: Set up Flutter
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter version
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        run: flutter --version

      - name: Cache Pub dependencies
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Install deps
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        run: flutter pub get

      # Разбивка тестов по шардaм с безопасной обработкой пустых наборов
      - name: Select tests for shard ${{ matrix.shard }}/${{ env.TOTAL_SHARDS }}
        if: ${{ steps.compute.outputs.fast_path != 'true' }}
        id: shard
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Collecting test files tracked by git…"
          # Берём только отслеживаемые файлы *_test.dart под каталогами test/
          mapfile -t ALL < <(git ls-files '*_test.dart' | grep -E '/test/.*_test\.dart$' | sort || true)

          echo "Total *_test.dart found: ${#ALL[@]}"
          if [ ${#ALL[@]} -eq 0 ]; then
            echo "No *_test.dart files found under /test — nothing to run in any shard."
            echo "no_tests=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          SHARD_IDX=${{ matrix.shard }}
          TOTAL=${{ env.TOTAL_SHARDS }}

          SEL=()
          for i in "${!ALL[@]}"; do
            if (( i % TOTAL == SHARD_IDX )); then
              SEL+=("${ALL[$i]}")
            fi
          done

          if [ ${#SEL[@]} -eq 0 ]; then
            echo "This shard ($SHARD_IDX/$TOTAL) has no assigned tests — skipping."
            echo "no_tests=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          printf "%s\n" "${SEL[@]}" | tee shard_tests.txt
          echo "Assigned to shard $SHARD_IDX:"
          sed 's/^/  - /' shard_tests.txt

          echo "no_tests=false" >> "$GITHUB_OUTPUT"

      - name: Run unit tests for shard ${{ matrix.shard }}
        if: ${{ steps.compute.outputs.fast_path != 'true' && steps.shard.outputs.no_tests == 'false' }}
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Running tests in shard ${{ matrix.shard }} of ${{ env.TOTAL_SHARDS }}:"
          sed 's/^/  - /' shard_tests.txt
          # Таймаут на каждый тестовый файл, явный прогресс
          flutter test --concurrency=6 --timeout=5m $(cat shard_tests.txt)

      # Покрытие считаем только в шарде 0 (чтобы не дублировать нагрузку)
      - name: Collect coverage (shard 0 only)
        if: ${{ steps.compute.outputs.fast_path != 'true' && matrix.shard == 0 && steps.shard.outputs.no_tests == 'false' }}
        run: flutter test --coverage --concurrency=6 --timeout=5m $(cat shard_tests.txt)
